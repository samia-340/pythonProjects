import logging
from flask import Flask, render_template
from cleaner import DesktopCleaner

# Configure custom logging
logger = logging.getLogger()
logger.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')

# Console handler for custom logging
console_handler = logging.StreamHandler()
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)

# Configure Werkzeug logging
werkzeug_logger = logging.getLogger('werkzeug')
werkzeug_logger.setLevel(logging.INFO)
werkzeug_logger.propagate = False #prevents Werkzeugâ€™s log messages from being handled by the root logger.
#This helps prevent duplicate log messages if you have other handlers or configurations.
werkzeug_logger.addHandler(console_handler)  # Use the same handler

app = Flask(__name__)

def create_cleaner_instance()->tuple:
    """
    Creates an instance of DesktopCleaner, performs cleanup, generates a summary, and closes the connection.
    
    Returns:
        tuple: A tuple containing the session ID and the summary generated by the DesktopCleaner instance.
    """
    # Log the creation of a DesktopCleaner instance
    logger.info("Creating DesktopCleaner instance...")
    config_path = r'C:\Users\Dell\Desktop\pythonProjects\cs50Project_desktopCleaner\configFile.json'
    cleaner = DesktopCleaner(config_path)
    cleaner.cleanup()
    summary = cleaner.generate_summary()
    session_id = cleaner._session_id
    
    cleaner.close_connection()
    logger.info("DesktopCleaner instance destroyed.")
    return session_id, summary

@app.route('/')
def index():
    """
    Handles requests to the root URL ('/').

    creates a DesktopCleaner instance, and renders the index.html template
    with the session ID and summary from the DesktopCleaner instance.

    """
    logger.info("Handling request to / route.")
    session_id, summary = create_cleaner_instance()
    # Render the 'index.html' template and pass the session ID and summary to it
    return render_template('index.html', session_id=session_id, summary=summary)

if __name__ == "__main__":
    logger.info("Starting the Flask web server...")
    app.run(debug=False)